--- /dev/null
+++ cryptominisat.h	2019-05-12 10:16:03.818362017 -0700
@@ -0,0 +1,177 @@
+/******************************************
+Copyright (c) 2016, Mate Soos
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+***********************************************/
+
+#ifndef __CRYPTOMINISAT5_H__
+#define __CRYPTOMINISAT5_H__
+
+#define CRYPTOMINISAT_VERSION_MAJOR 5
+#define CRYPTOMINISAT_VERSION_MINOR 6
+#define CRYPTOMINISAT_VERSION_PATCH 8
+
+#include <atomic>
+#include <vector>
+#include <iostream>
+#include <utility>
+#include <string>
+#include "cryptominisat5/solvertypesmini.h"
+
+namespace CMSat {
+    struct CMSatPrivateData;
+    #ifdef _WIN32
+    class __declspec(dllexport) SATSolver
+    #else
+    class SATSolver
+    #endif
+    {
+    public:
+        SATSolver(void* config = NULL
+        , std::atomic<bool>* interrupt_asap = NULL
+        );
+        ~SATSolver();
+
+        ////////////////////////////
+        // Adding variables and clauses
+        ////////////////////////////
+
+        void new_var(); //add a new variable to the solver
+        void new_vars(const size_t n); //and many new variables to the solver -- much faster
+        unsigned nVars() const; //get number of variables inside the solver
+        bool add_clause(const std::vector<Lit>& lits);
+        bool add_xor_clause(const std::vector<unsigned>& vars, bool rhs);
+
+        ////////////////////////////
+        // Solving and simplifying
+        // You can call solve() multiple times: incremental mode is supported!
+        ////////////////////////////
+
+        lbool solve(const std::vector<Lit>* assumptions = 0, bool only_indep_solution = false); //solve the problem, optionally with assumptions. If only_indep_solution is set, only the independent variables set with set_independent_vars() are returned in the solution
+        lbool simplify(const std::vector<Lit>* assumptions = 0); //simplify the problem, optionally with assumptions
+        const std::vector<lbool>& get_model() const; //get model that satisfies the problem. Only makes sense if previous solve()/simplify() call was l_True
+        const std::vector<Lit>& get_conflict() const; //get conflict in terms of the assumptions given in case the previous call to solve() was l_False
+        bool okay() const; //the problem is still solveable, i.e. the empty clause hasn't been derived
+        const std::vector<Lit>& get_decisions_reaching_model() const; //get decisions that lead to model. may NOT work, in case the decisions needed were internal, extended variables. exit(-1)'s in case of such a case. you MUST check decisions_reaching_computed().
+
+        ////////////////////////////
+        // Debug all calls for later replay with --debuglit FILENAME
+        ////////////////////////////
+        void log_to_file(std::string filename);
+
+        ////////////////////////////
+        // SQLite for statistics gathering
+        ////////////////////////////
+        void set_sqlite(std::string filename);
+        void add_sql_tag(const std::string& tagname, const std::string& tag);
+        unsigned long get_sql_id() const;
+
+        ////////////////////////////
+        // Configuration
+        // -- Note that nothing else can be changed, only these.
+        // -- The main.cpp has access to the internal config, but it changes
+        // -- all the time and hence exposing it to the outside world would
+        // -- be very brittle.
+        ////////////////////////////
+
+        void set_num_threads(unsigned n); //Number of threads to use. Must be set before any vars/clauses are added
+        void set_allow_otf_gauss(); //allow on-the-fly gaussian elimination
+        void set_max_time(double max_time); //max time to run to on next solve() call
+        void set_max_confl(int64_t max_confl); //max conflict to run to on next solve() call
+        void set_verbosity(unsigned verbosity = 0); //default is 0, silent
+        void set_default_polarity(bool polarity); //default polarity when branching for all vars
+        void set_no_simplify(); //never simplify
+        void set_no_simplify_at_startup(); //doesn't simplify at start, faster startup time
+        void set_no_equivalent_lit_replacement(); //don't replace equivalent literals
+        void set_no_bva(); //No bounded variable addition
+        void set_no_bve(); //No bounded variable elimination
+        void set_greedy_undef(); //Try to set variables to l_Undef in solution
+        void set_sampling_vars(std::vector<uint32_t>* sampl_vars);
+        void set_timeout_all_calls(double secs); //max timeout on all subsequent solve() or simplify
+        void set_up_for_scalmc(); //used to set the solver up for ScalMC configuration
+        void set_need_decisions_reaching(); //set it before calling solve()
+        bool get_decision_reaching_valid() const; //the get_decisions_reaching_model will work -- it may NOT be
+
+
+        ////////////////////////////
+        // Get generic info
+        ////////////////////////////
+        static const char* get_version(); //get solver version in string format
+        static const char* get_version_sha1(); //get SHA1 version string of the solver
+        static const char* get_compilation_env(); //get compilation environment string
+        std::string get_text_version_info();  //get printable version and copyright text
+
+
+        ////////////////////////////
+        // Get info about only the last solve() OR simplify() call
+        // summed for all threads
+        ////////////////////////////
+        uint64_t get_last_conflicts(); //get total number of conflicts of last solve() or simplify() call of all threads
+        uint64_t get_last_propagations();  //get total number of propagations of last solve() or simplify() call made by all threads
+        uint64_t get_last_decisions(); //get total number of decisions of last solve() or simplify() call made by all threads
+
+
+        ////////////////////////////
+        //Get info about total sum of all time of all threads
+        ////////////////////////////
+
+        uint64_t get_sum_conflicts(); //get total number of conflicts of all time of all threads
+        uint64_t get_sum_propagations();  //get total number of propagations of all time made by all threads
+        uint64_t get_sum_decisions(); //get total number of decisions of all time made by all threads
+
+        void print_stats() const; //print solving stats. Call after solve()/simplify()
+        void set_drat(std::ostream* os, bool set_ID); //set drat to ostream, e.g. stdout or a file
+        void interrupt_asap(); //call this asynchronously, and the solver will try to cleanly abort asap
+        void dump_irred_clauses(std::ostream *out) const; //dump irredundant clauses to this stream when solving finishes
+        void dump_red_clauses(std::ostream *out) const; //dump redundant ("learnt") clauses to this stream when solving finishes
+        void open_file_and_dump_irred_clauses(std::string fname) const; //dump irredundant clauses to this file when solving finishes
+        void open_file_and_dump_red_clauses(std::string fname) const; //dump redundant ("learnt") clauses to this file when solving finishes
+        void add_in_partial_solving_stats(); //used only by Ctrl+C handler. Ignore.
+
+        ////////////////////////////
+        // Extract useful information from the solver
+        // This can be used in the theory solver
+
+        ////////////////////////////
+        std::vector<Lit> get_zero_assigned_lits() const; //get literals of fixed value
+        std::vector<std::pair<Lit, Lit> > get_all_binary_xors() const; //get all binary XORs that are = 0
+
+        //////////////////////
+        // EXPERIMENTAL
+        std::vector<std::pair<std::vector<uint32_t>, bool> > get_recovered_xors(bool elongate) const; //get XORs recovered. If "elongate" is TRUE, then variables shared ONLY by two XORs will be XORed together
+
+        //////////////////////
+        //Below must be done in-order. Multi-threading not allowed.
+        // EXPERIMENTAL!!!
+
+        void start_getting_small_clauses(uint32_t max_len, uint32_t max_glue);
+        bool get_next_small_clause(std::vector<Lit>& ret); //returns FALSE if no more
+        void end_getting_small_clauses();
+
+    private:
+
+        ////////////////////////////
+        // Do not bother with this, it's private
+        ////////////////////////////
+
+        CMSatPrivateData *data;
+    };
+}
+
+#endif //__CRYPTOMINISAT5_H__
--- /dev/null	2019-04-08 09:14:28.485573579 -0700
+++ src/GitSHA1.cpp	2019-05-12 10:34:45.388363865 -0700
@@ -0,0 +1,65 @@
+/******************************************
+Copyright (c) 2017, Mate Soos
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+***********************************************/
+
+#include "src/GitSHA1.h"
+
+const char* CMSat::get_version_sha1()
+{
+    static const char myversion_sha1[] = "f5609bfda3edbe373999fa5f79bc153ee619a7ca";
+    return myversion_sha1;
+}
+
+const char* CMSat::get_version_tag()
+{
+    static const char myversion_tag[] = "5.6.8";
+    return myversion_tag;
+}
+
+const char* CMSat::get_compilation_env()
+{
+    static const char compilation_env[] =
+    "CMAKE_CXX_COMPILER = /usr/bin/c++ | "
+    "CMAKE_CXX_FLAGS =  -Wall -Wextra -Wunused -Wsign-compare -fno-omit-frame-pointer -Wtype-limits -Wuninitialized -Wno-deprecated -Wstrict-aliasing -Wpointer-arith -Wpointer-arith -Wformat-nonliteral -Winit-self -Wparentheses -Wunreachable-code -ggdb3 -Wlogical-op -Wrestrict -Wnull-dereference -Wdouble-promotion -Wshadow -Wformat=2 -Wextra-semi -pedantic -Wno-class-memaccess | "
+    "COMPILE_DEFINES =  -DUSE_GAUSS -DUSE_ZLIB -DYALSAT_FPU | "
+    "STATICCOMPILE = OFF | "
+    "ONLY_SIMPLE = OFF | "
+    "Boost_FOUND = | "
+    "STATS = OFF | "
+    "SQLITE3_FOUND =  | "
+    "ZLIB_FOUND = TRUE | "
+    "VALGRIND_FOUND =  | "
+    "ENABLE_TESTING = OFF | "
+    "M4RI_FOUND = FALSE | "
+    "NOM4RI = OFF | "
+    "SLOW_DEBUG = OFF | "
+    "ENABLE_ASSERTIONS = ON | "
+    "PYTHON_EXECUTABLE = /usr/bin/python3 | "
+    "PYTHON_LIBRARY = /usr/lib/libpython3.7m.so | "
+    "PYTHON_INCLUDE_DIRS = /usr/include/python3.7m | "
+    "MY_TARGETS =  | "
+    "LARGEMEM = OFF | "
+    "LIMITMEM = OFF | "
+    "compilation date time = " __DATE__ " " __TIME__
+    ""
+    ;
+    return compilation_env;
+}
--- /dev/null	2019-04-08 09:14:28.485573579 -0700
+++ solvertypesmini.h	2019-05-12 09:40:39.465203682 -0700
@@ -0,0 +1,215 @@
+/******************************************
+Copyright (c) 2016, Mate Soos
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
+***********************************************/
+
+#ifndef __SOLVERTYPESMINI_H__
+#define __SOLVERTYPESMINI_H__
+
+#include <cstdint>
+#include <iostream>
+#include <cassert>
+#include <vector>
+
+namespace CMSat {
+
+#define var_Undef (0xffffffffU >> 4)
+
+class TooManyVarsError {};
+class TooLongClauseError {};
+
+class Lit
+{
+    uint32_t x;
+    explicit Lit(uint32_t i) : x(i) { }
+public:
+    Lit() : x(var_Undef<<1) {}   // (lit_Undef)
+    explicit Lit(uint32_t var, bool is_inverted) :
+        x(var + var + is_inverted)
+    {}
+
+    const uint32_t& toInt() const { // Guarantees small, positive integers suitable for array indexing.
+        return x;
+    }
+    Lit  operator~() const {
+        return Lit(x ^ 1);
+    }
+    Lit  operator^(const bool b) const {
+        return Lit(x ^ (uint32_t)b);
+    }
+    Lit& operator^=(const bool b) {
+        x ^= (uint32_t)b;
+        return *this;
+    }
+    bool sign() const {
+        return x & 1;
+    }
+    uint32_t  var() const {
+        return x >> 1;
+    }
+    Lit  unsign() const {
+        return Lit(x & ~1U);
+    }
+    bool operator==(const Lit& p) const {
+        return x == p.x;
+    }
+    bool operator!= (const Lit& p) const {
+        return x != p.x;
+    }
+    /**
+    @brief ONLY to be used for ordering such as: a, b, ~b, etc.
+    */
+    bool operator <  (const Lit& p) const {
+        return x < p.x;     // '<' guarantees that p, ~p are adjacent in the ordering.
+    }
+    bool operator >  (const Lit& p) const {
+        return x > p.x;
+    }
+    bool operator >=  (const Lit& p) const {
+        return x >= p.x;
+    }
+    static Lit toLit(uint32_t data)
+    {
+        return Lit(data);
+    }
+};
+
+static const Lit lit_Undef(var_Undef, false);  // Useful special constants.
+static const Lit lit_Error(var_Undef, true );  //
+
+inline std::ostream& operator<<(std::ostream& os, const Lit lit)
+{
+    if (lit == lit_Undef) {
+        os << "lit_Undef";
+    } else {
+        os << (lit.sign() ? "-" : "") << (lit.var() + 1);
+    }
+    return os;
+}
+
+inline std::ostream& operator<<(std::ostream& co, const std::vector<Lit>& lits)
+{
+    for (uint32_t i = 0; i < lits.size(); i++) {
+        co << lits[i];
+
+        if (i != lits.size()-1)
+            co << " ";
+    }
+
+    return co;
+}
+
+#define l_True  lbool((uint8_t)0) // gcc does not do constant propagation if these are real constants.
+#define l_False lbool((uint8_t)1)
+#define l_Undef lbool((uint8_t)2)
+
+
+class llbool;
+
+class lbool {
+    uint8_t value;
+
+public:
+    explicit lbool(uint8_t v) : value(v) { }
+
+    lbool()       : value(0) { }
+    explicit lbool(bool x) : value(!x) { }
+    inline lbool(llbool b);
+
+    bool  operator == (lbool b) const {
+        return ((b.value & 2) & (value & 2)) | (!(b.value & 2) & (value == b.value));
+    }
+    bool  operator != (lbool b) const {
+        return !(*this == b);
+    }
+    lbool operator ^  (bool  b) const {
+        return lbool((uint8_t)(value ^ (uint8_t)b));
+    }
+
+    lbool operator && (lbool b) const {
+        uint8_t sel = (this->value << 1) | (b.value << 3);
+        uint8_t v   = (0xF7F755F4 >> sel) & 3;
+        return lbool(v);
+    }
+
+    lbool operator || (lbool b) const {
+        uint8_t sel = (this->value << 1) | (b.value << 3);
+        uint8_t v   = (0xFCFCF400 >> sel) & 3;
+        return lbool(v);
+    }
+
+    uint8_t getValue() const { return value; }
+
+    friend int   toInt  (lbool l);
+    friend lbool toLbool(int   v);
+    friend class llbool;
+};
+
+inline lbool boolToLBool(const bool b)
+{
+    if (b)
+        return l_True;
+    else
+        return l_False;
+}
+
+
+/**
+@brief A very hackish lbool that also supports l_Nothing and l_Continue
+*/
+class llbool
+{
+    char value;
+
+public:
+    llbool(): value(0) {}
+    llbool(lbool v) :
+            value(v.value) {}
+    llbool(char a) :
+            value(a) {}
+
+    inline bool operator!=(const llbool& v) const {
+        return (v.value != value);
+    }
+
+    inline bool operator==(const llbool& v) const {
+        return (v.value == value);
+    }
+
+    friend class lbool;
+};
+static const llbool l_Nothing  = llbool(2);
+static const llbool l_Continue = llbool(3);
+inline lbool::lbool(llbool b): value(b.value) {
+    assert(b != l_Nothing);
+    assert(b != l_Continue);
+}
+
+inline std::ostream& operator<<(std::ostream& cout, const lbool val)
+{
+    if (val == l_True) cout << "l_True";
+    if (val == l_False) cout << "l_False";
+    if (val == l_Undef) cout << "l_Undef";
+    return cout;
+}
+
+}
+
+#endif //__SOLVERTYPESMINI_H__
