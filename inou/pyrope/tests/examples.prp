
// 1 - good
a1 = b
a2 as b
a3 := b

// 2 - good
a := 3

// 3 - good
I(b.total==0)

// 4 - good
a = 1..b
a = 1..b.field
for i in 1..b.field {
}

// 5 - good
a = b | c

// 6 - parses only
..a.. = @foo

// 7 - good
a = waitfor(@foo)

// 8 - good
a = @foo

// 9 - almost good; problem with return statements that are only variables or constants
 a |> ::{ return $} |> s

// 10 - good
unique if cond {
}

// 11 - good
a |> fcall() |> fcall2()

// 12 - good
a = 5 |> fcall()

// 13 - good
fcall(1,,,3,,,4,,,)
// same as 
fcall(1,3,4)

// 14 - good
a = 3
  ++ 4 -- 3 // this parses fine
x = 3 ; ++ 4 -- 3 // this should be the same

// 15 - close; still problems with range notation in LNAST
a = tup[-1..3]  // means start from upper side of range (MSB instead of LSB)

// 16 - good
a = punch("foo.bar")

// 17 - good, except missing return statement now
tmp = ::{
  a = 3
  3
}

// 18 - good
a ^= 3

// 19 - good
a = 3.foo()  // same as foo(3)

// 20 - good
a = 0b1?1 // legal

// 21 - parses only, no then operator in LNAST yet
a = b then c 
// if b then c must be true. The logical table: !b or c
// b c a
// 1 1 1
// 1 0 0
// 0 1 1
// 0 0 1
